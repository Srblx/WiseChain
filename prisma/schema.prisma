// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  firstname     String
  lastname      String
  pseudo        String   @unique
  mail          String   @unique
  password      String
  country       String   @default("france")
  date_of_birth DateTime @db.Date
  roles         String   @default("suscriber")
  profile_img   String?
  is_verified   Boolean @default(false)
  is_revoice    Boolean
  created_at    DateTime @default(now())
  articles      Article[]
  realize_questionaries RealizeQuestionary[]
  staff_requests StaffRequest[]
  community_messages CommunityMessage[]
  fictive_accounts FictiveAccount[]
  user_rewards   UserReward[]
}

model Article {
  id         String   @id @default(cuid())
  title      String
  summary    String   @db.Text
  img  String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  category   Category @relation(fields: [category_id], references: [id])
  category_id String
  sequence_article SequenceArticle[]
}

model SequenceArticle {
  id        String @id @default(cuid())
  index     Int    @unique
  title     String @db.Text
  containt  String @db.Text
  img       String? @db.Text
  article    Article @relation(fields: [article_id], references: [id])
  article_id String
}

model RealizeQuestionary {
  id                    String   @id @default(cuid())
  score                 Int
  date_of_realize_questionary Boolean
  user                  User     @relation(fields: [user_id], references: [id])
  user_id               String
  questionary           Questionary @relation(fields: [questionary_id], references: [id])
  questionary_id        String
}

model Questionary {
  id         String   @id @default(cuid())
  subject    String   @db.VarChar(150)
  creator    String
  created_at DateTime @default(now())
  realize_questionaries RealizeQuestionary[]
  rewards    Reward[]
  questions  Question[]
  answers    Answer[]
}

model Course {
  id          String   @id @default(cuid())
  main_title  String
  description String?
  img         String
  content     String   @db.Text
  created_at  DateTime @default(now())
  update_at   DateTime @updatedAt @db.Date
  category    Category @relation(fields: [category_id], references: [id])
  category_id String
  difficulty      String @default("Facile")
  sequences   Sequence[]
  tool_courses ToolCourse[]
}

model ToolCourse {
  course   Course @relation(fields: [course_id], references: [id])
  course_id String
  tool     Tool   @relation(fields: [tool_id], references: [id])
  tool_id  String

  @@id([course_id, tool_id])
}

model Tool {
  id   String @id @default(cuid())
  name String @db.VarChar(150)
  link String @db.VarChar(200)
  img  String @db.Text
  tool_courses ToolCourse[]
}

model Sequence {
  id        String @id @default(cuid())
  index     Int    @unique
  title     String @db.Text
  containt  String @db.Text
  img       String? @db.Text
  course    Course @relation(fields: [course_id], references: [id])
  course_id String
}

model Reward {
  id            String   @id @default(cuid())
  is_claim      Boolean
  date_of_claim DateTime? @db.Date
  questionary   Questionary @relation(fields: [questionary_id], references: [id])
  questionary_id String
  user_rewards  UserReward[]
}

model UserReward {
  user     User   @relation(fields: [user_id], references: [id])
  user_id  String
  reward   Reward @relation(fields: [reward_id], references: [id])
  reward_id String

  @@id([reward_id, user_id])
}

model StaffRequest {
  id           String   @id @default(cuid())
  subject      String   @db.VarChar(150)
  message      String   @db.Text
  date_sending DateTime @db.Date
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String
}

model CommunityMessage {
  id       String @id @default(cuid())
  subject  String @db.VarChar(150)
  content  String @db.Text
  user     User   @relation(fields: [user_id], references: [id])
  user_id  String
}

model FictiveAccount {
  id            String @id @default(cuid())
  solde         Int
  number_account Int
  user          User  @relation(fields: [user_id], references: [id])
  user_id       String
}

model Category {
  id       String    @id @default(cuid())
  name     String    @db.VarChar(80)
  articles Article[]
  courses  Course[]
}

model Answer {
  id             String      @id @default(cuid())
  answer         String      @db.VarChar(255)
  correct_answer Boolean
  questionary    Questionary @relation(fields: [questionary_id], references: [id])
  questionary_id String
  question       Question    @relation(fields: [question_id], references: [id]) 
  question_id    String      
}

model Question {
  id            String      @id @default(cuid())
  question      String      @db.VarChar(255) 
  questionary   Questionary @relation(fields: [questionary_id], references: [id])
  questionary_id String
  answers       Answer[]
}

model Glossary {
  id         String   @id @default(cuid())
  title       String
  definition  String   @db.Text
  created_at  DateTime @default(now())
}

